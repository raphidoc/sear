test$txt
test$bin
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
test$txt
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
reactiveValues(
txt = {input$mtelog$datapath[stringr::str_detect(input$DataLogger$datapath, ".txt")]},
bin = {input$mtelog$datapath[stringr::str_detect(input$DataLogger$datapath, ".bin")]}
)
input$mtelog
input$mtelog$datapath
input$mtelog$datapath[stringr::str_detect(input$DataLogger$datapath, ".txt")
]
golem::document_and_reload()
golem::run_dev()
test$txt
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
golem::document_and_reload()
golem::run_dev()
Apla
Apla()
load("/D/Data/Coast-JB/CoastJB_2018_Rrs_IOPs_discrete.RData")
View(DB2018)
golem::add_module("selection_display")
golem::document_and_reload()
golem::run_dev()
run_app()
run_app()
run_app()
load("/D/Data/Coast-JB/CoastJB_2018_Rrs_IOPs_discrete.RData")
View(DB2018)
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::add_utils()
golem::add_utils("zoom_center")
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
mtelog <- read_mtelog(DataFiles()$txt)
View(mtelog)
golem::add_module("select_instrument")
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
View(InstrumentList)
golem::document_and_reload()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
InstrumentList
golem::document_and_reload()
run_app()
InstrumentList
golem::document_and_reload()
run_app()
any(InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
InstrumentList %in% c("OCR1", "OCR2", "OCR3")
any(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
any(!InstrumentList %in% c("OCR1", "OCR2", "OCR4"))
any(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
golem::document_and_reload()
run_app()
any(InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
any(InstrumentList %in% c("OCR1", "OCR2", "OCR3")) & any(!InstrumentList %in% c("OCR1", "OCR2", "OCR"))
any(InstrumentList %in% c("OCR1", "OCR2", "OCR3")) & any(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
if (any(InstrumentList %in% c("OCR1", "OCR2", "OCR3")) & any(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))) {
where(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
}
if (any(InstrumentList %in% c("OCR1", "OCR2", "OCR3")) & any(!InstrumentList %in% c("OCR1", "OCR2", "OCR"))) {
where(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
}
golem::document_and_reload()
run_app()
if (any(InstrumentList %in% c("OCR1", "OCR2", "OCR3")) & any(!InstrumentList %in% c("OCR1", "OCR2", "OCR"))) {
which(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
}
which(!InstrumentList %in% c("OCR1", "OCR2", "OCR3")
)
InstrumentList <- list("OCR1", "OCR2")
which(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
!InstrumentList %in% c("OCR1", "OCR2", "OCR3")
InstrumentList !%in% c("OCR1", "OCR2", "OCR3")
InstrumentList %in% !c("OCR1", "OCR2", "OCR3")
InstrumentList %in% c("OCR1", "OCR2", "OCR3")
which(c("OCR1", "OCR2", "OCR3") %in% InstrumentList)
which(!c("OCR1", "OCR2", "OCR3") %in% InstrumentList)
c("OCR1", "OCR2", "OCR3")[which(!c("OCR1", "OCR2", "OCR3") %in% InstrumentList)]
any(InstrumentList %in% c("OCR1", "OCR2", "OCR3")) & any(!InstrumentList %in% c("OCR1", "OCR2", "OCR3"))
golem::document_and_reload()
run_app()
InstrumentList <- case_when(
str_detect(., "OCR1|OCR2|OCR3") ~ "HOCR"
)
InstrumentList <- case_when(
str_detect(InstrumentList, "OCR1|OCR2|OCR3") ~ "HOCR"
)
InstrumentList <- case_when(
str_detect(InstrumentList, "OCR1|OCR2|OCR3") ~ "HOCR"
) %>%
unique()
golem::document_and_reload()
run_app()
InstrumentList <- case_when(
str_detect(InstrumentList, "OCR1|OCR2|OCR3") ~ "HOCR"
) %>%
unique()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
str_remove(InstrumentList, "OCR1|OCR2|OCR3")
InstrumentList <- str_remove(InstrumentList, "OCR1|OCR2|OCR3")
InstrumentList <- case_when(
str_detect(InstrumentList, "OCR1|OCR2|OCR3") ~ "HOCR"
) %>%
unique()
golem::add_fct("cal_hocr")
golem::add_module("L1L2_station")
golem::add_module("L1L2_transect")
golem::add_module("processing_parmameter")
golem::add_module("L1L2_parmameter")
golem::add_module("process_L1L2")
golem::add_module("load_cal")
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::add_fct("hocr")
golem::document_and_reload()
golem::document_and_reload()
golem::add_fct("hocr")
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
View(RawData)
GlobCal <- RawData %>% group_by(Instrument, SN) %>% nest(RawData = !matches("Instrument|SN"))
GlobCal <- left_join(GlobCal, CalHOCR$OPTIC3, by = c("Instrument", "SN"))
GlobCal <- left_join(GlobCal, CalHOCR$THERM1, by = c("Instrument", "SN"))
GlobCal <- left_join(GlobCal, CalHOCR$INTTIME, by = c("Instrument", "SN"))
GlobCal <- left_join(GlobCal, CalHOCR$SAMPLE, by = c("Instrument", "SN"))
# taken from: https://gist.github.com/mdlincoln/528a53939538b07ade86
row_rep <- function(df, n) {
df[rep(1:nrow(df), times = n),]
}
GlobCal <- GlobCal %>% mutate(RawData = purrr::map2(RawData, OPTIC3, ~ bind_cols(.x, row_rep(.y, nrow(.x)/nrow(.y)))))
cal_inttime <- function(RawData, INTTIME){
a0 <- INTTIME$a0
a1 <- INTTIME$a1
purrr::modify_in(RawData, .where = "IntTime", ~(a0*.x^0) + (a1*.x^1))
}
GlobCal <- GlobCal %>% mutate(CalData = purrr::map2(.x = RawData, .y = INTTIME, .f = ~cal_inttime(.x, .y)))
cal_optic3 <- function(.x, Instrument){
if (str_detect(Instrument, "HSE|HED")) { # In air
dplyr::mutate(.data = .x, Channels = 1.0*a1*(Channels-a0)*(cint/IntTime))
} else if (str_detect(Instrument, "HPL|PLD")){ # In water
dplyr::mutate(.data = .x, Channels = im*a1*(Channels-a0)*(cint/IntTime))
} else {
warning(paste0("Instrument name not valid: ", Instrument))
}
}
GlobCal <- GlobCal %>% mutate(CalData = purrr::map2(.x = CalData, .y = Instrument, ~ cal_optic3(.x, .y)))
HOCRLong <- GlobCal %>% # OPTIC3
mutate(CalData = purrr::map(
CalData,
~ select(.x, !all_of(c("Units","FieldLength","DataType","CalLines","FitType","a0","a1","im","cint")))
)) %>% # Packet metadata
mutate(CalData = purrr::map(
CalData, ~ select(.x, !all_of(c("SampleDelay","DarkSample","DarkAverage","SpecTemp","Frame","Timer","CheckSum")))
)) %>%
select(Instrument, SN, CalData) %>%
filter(str_detect(Instrument, "HSE|HPL"))
HOCRWide <- HOCRLong %>%
mutate(CalData = purrr::map(
CalData,
~ pivot_wider(
.,
names_from = all_of(c("Type", "Wavelength")),
names_sep = "_",
values_from = Channels
))) %>%
mutate(CalData = purrr::map(CalData, ~ select(., where(function(x) all(!is.na(x))))))
ShortNobs <- HOCRWide %>%
mutate(Nobs = purrr::map_dbl(CalData, ~ length(rownames(.))))
ShortNobs <- ShortNobs %>%
filter(Nobs == min(ShortNobs$Nobs)) %>%
unnest(cols = c(CalData))
MinTime <- min(ShortNobs$GPSTime)
MaxTime <- max(ShortNobs$GPSTime)
TimeSeq <- seq.POSIXt(MinTime, MaxTime, by = min(ShortNobs$IntTime))
HOCRWide <- HOCRWide %>%
mutate(CalData = purrr::map(CalData, ~ select(., !IntTime)))
approx_tbl <- function(., TimeSeq) {
tbl <- tibble(DateTime = TimeSeq)
for (i in seq_along(colnames(.))[-1]) {
coord <- approx(x = .[[1]], y = .[[i]], xout = TimeSeq, method = "linear")
tbl <- bind_cols(tbl, x = coord[[2]])
colnames(tbl)[i] <- colnames(.)[i]
}
tbl %>% mutate(ID = seq_along(TimeSeq))
}
HOCRWide <- HOCRWide %>%
mutate(AproxData = purrr::map(CalData, ~ approx_tbl(., TimeSeq)))
HOCRLong <- HOCRWide %>%
mutate(AproxData = purrr::map(
AproxData,
~pivot_longer(
.,
cols = matches("[[:alpha:]]{2}_[[:digit:]]{3}(.[[:digit:]]{1,2})?"),
values_to = "Channels",
names_to = "Wavelength",
names_prefix = "[[:alpha:]]{2}_",
names_transform = list(Wavelength = as.numeric)
) %>%
group_by(ID)
))
HOCRLong
PlotHOCR <- Station() %>% select(Instrument, SN, AproxData)
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
GlobCal <- RawData %>% group_by(Instrument, SN) %>% nest(RawData = !matches("Instrument|SN"))
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeIndexHOCR(), TimeInt)
golem::document_and_reload()
run_app()
Station(process_station(FiltRawHOCR = FiltRawHOCR, CalData = CalData(), Apla = Apla())) # add BB3, CTD ...
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
Station
Station()
filter_hocr(RawHOCR(), TimeIndexHOCR(), TimeInt)
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeIndexHOCR(), TimeInt)
RawHOCR()
TimeIndexHOCR()
TimeInt
# Filter data point before processing to optimize execution time
SelDateTime <- UpApla()$DateTime[UpApla()$ID %in% Selected()$customdata]
UpApla()$DateTime
Selected()
SelDisplay$Selected
Selected
event_data("plotly_selected", source = "map")
golem::document_and_reload()
run_app()
Selected
Selected()
run_app()
Selected
Station
Station()
Station()
process_station(FiltRawHOCR = FiltRawHOCR, CalData = CalData(), Apla = Apla()) # add BB3, CTD ...
golem::document_and_reload()
run_app()
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeIndexHOCR(), TimeInt)
Station <- reactive({
process_station(FiltRawHOCR = FiltRawHOCR, CalData = CalData(), Apla = Apla()) # add BB3, CTD ...
})
mod_L1L2_station_server("L1L2_station", Station)
is.reactive(Station)
PlotHOCR <- Station() %>% select(Instrument, SN, AproxData)
ply <- PlotHOCR %>%
#filter(str_detect(Instrument, "HPL")) %>%
mutate(Plot = purrr::map2(.x = AproxData, .y = SN, ~
plot_ly(.x) %>%
add_lines(x = ~Wavelength, y = ~Channels , name = .y, showlegend = F) %>%
add_annotations(
text = ~.y,
x = 0.5,
y = 1,
yref = "paper",
xref = "paper",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15)
) %>%
layout(
shapes = BlackSquare,
yaxis = list(rangemode = "nonnegative"
#title = list(text = ~paste0(unique(.x$Type), unique(.x$Units)))
),
xaxis = list(rangemode = "nonnegative")
)
))
PlyFont <- list(family="Times New Roman", size = 18)
BlackSquare <- list(type = "rect", fillcolor = "transparent",line = list(width = 0.5), xref = "paper", yref = "paper", x0 = 0, x1 = 1, y0 = 0, y1 = 1 )
ply <- PlotHOCR %>%
#filter(str_detect(Instrument, "HPL")) %>%
mutate(Plot = purrr::map2(.x = AproxData, .y = SN, ~
plot_ly(.x) %>%
add_lines(x = ~Wavelength, y = ~Channels , name = .y, showlegend = F) %>%
add_annotations(
text = ~.y,
x = 0.5,
y = 1,
yref = "paper",
xref = "paper",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15)
) %>%
layout(
shapes = BlackSquare,
yaxis = list(rangemode = "nonnegative"
#title = list(text = ~paste0(unique(.x$Type), unique(.x$Units)))
),
xaxis = list(rangemode = "nonnegative")
)
))
Lu <- ply %>%
filter(str_detect(Instrument, "HPL")) %>%
subplot(shareX = T, shareY = T)
Es <- ply %>%
filter(str_detect(Instrument, "HSE"))
Es <- Es$Plot
p <- subplot(Es[[1]], Lu, nrows = 2, margin = 0.035) %>%
add_annotations(
text = ~TeX("\\text{Wavelength [nm]}"),
x = 0.5,
y = -0.1,
yref = "paper",
xref = "paper",
xanchor = "middle",
yanchor = "bottom",
showarrow = FALSE,
font = list(size = 18)
) %>%
layout(
font = PlyFont,
yaxis = list(title = list(text = TeX("\\text{E}_\\text{s}"))),
yaxis2 = list(title = list(text = TeX("\\text{L}_\\text{u}")))#,
#xaxis3 = list(title = list(text = TeX("\\text{Wavelength}")))
) %>%
config(mathjax = "local", displayModeBar = T)
# Iframe to render svg properly
widgetframe::frameableWidget(p)
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
Station
Station()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
run_app(options(shiny.reactlog = TRUE))
options(shiny.reactlog = TRUE)
run_app()
options(shiny.reactlog = TRUE)
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
Station
is.reactive(Station)
req(Station())
req(Station
)
golem::document_and_reload()
)
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
run_app()
golem::document_and_reload()
run_app()
View(test)
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
Station()
RawHOCR()
TimeIndexHOCR()
TimeInt
golem::document_and_reload()
run_app()
Station
Station()
golem::document_and_reload()
run_app()
golem::document_and_reload()
run_app()
