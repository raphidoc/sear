tbl %>% mutate(ID = seq_along(nrow(tbl)))
}
HOCRWide <- HOCRLong %>%
mutate(CalData = purrr::map(
CalData,
~ pivot_wider(
.,
names_from = all_of(c("Type", "Wavelength")),
names_sep = "_",
values_from = Channels
))) %>%
mutate(CalData = purrr::map(CalData, ~ select(., where(function(x) all(!is.na(x))))))
HOCRLong <- GlobCal %>% # OPTIC3
mutate(CalData = purrr::map(
CalData,
~ select(.x, !all_of(c("Units","FieldLength","DataType","CalLines","FitType","a0","a1","im","cint")))
)) %>% # Packet metadata
mutate(CalData = purrr::map(
CalData, ~ select(.x, !all_of(c("SampleDelay","DarkSample","DarkAverage","SpecTemp","Frame","Timer","CheckSum")))
)) %>%
select(Instrument, SN, CalData) %>%
filter(str_detect(Instrument, "HSE|HPL"))
HOCRWide <- HOCRLong %>%
mutate(CalData = purrr::map(
CalData,
~ pivot_wider(
.,
names_from = all_of(c("Type", "Wavelength")),
names_sep = "_",
values_from = Channels
))) %>%
mutate(CalData = purrr::map(CalData, ~ select(., where(function(x) all(!is.na(x))))))
ShortNobs <- HOCRWide %>%
mutate(Nobs = purrr::map_dbl(CalData, ~ length(rownames(.))))
ShortNobs <- ShortNobs %>%
filter(Nobs == min(ShortNobs$Nobs)) %>%
unnest(cols = c(CalData))
MinTime <- min(ShortNobs$GPSTime)
#format(MinTime, "%Y-%m-%d %H:%M:%OS3")
MaxTime <- max(ShortNobs$GPSTime)
#format(MaxTime, "%Y-%m-%d %H:%M:%OS3")
TimeSeq <- seq.POSIXt(MinTime, MaxTime, by = min(ShortNobs$IntTime))
#format(TimeSeq, "%Y-%m-%d %H:%M:%OS3")
HOCRWide <- HOCRWide %>%
mutate(CalData = purrr::map(CalData, ~ select(., !IntTime)))
approx_tbl <- function(., TimeSeq) {
tbl <- tibble(DateTime = TimeSeq)
for (i in seq_along(colnames(.))[-1]) {
coord <- approx(x = .[[1]], y = .[[i]], xout = TimeSeq, method = "linear")
tbl <- bind_cols(tbl, x = coord[[2]])
colnames(tbl)[i] <- colnames(.)[i]
}
tbl %>% mutate(ID = seq_along(nrow(tbl)))
}
HOCRWide <- HOCRWide %>%
mutate(AproxData = purrr::map(CalData, ~ approx_tbl(., TimeSeq)))
HOCRLong <- HOCRWide %>%
mutate(AproxData = purrr::map(
AproxData,
~pivot_longer(
.,
cols = matches("[[:alpha:]]{2}_[[:digit:]]{3}(.[[:digit:]]{1,2})?"),
values_to = "Channels",
names_to = c("Wavelength"),
names_prefix = "[[:alpha:]]{2}_",
names_transform = list(Wavelength = as.numeric)
) %>%
group_by(ID)
))
HOCRdata <- HOCRLong %>% select(Instrument, SN, AproxData)
View(HOCRdata)
View(HOCRdata[[3]][[1]])
View(HOCRWide)
View(HOCRWide[[4]][[1]])
tbl %>% mutate(ID = seq_along(length(nrow(tbl))))
approx_tbl <- function(., TimeSeq) {
tbl <- tibble(DateTime = TimeSeq)
for (i in seq_along(colnames(.))[-1]) {
coord <- approx(x = .[[1]], y = .[[i]], xout = TimeSeq, method = "linear")
tbl <- bind_cols(tbl, x = coord[[2]])
colnames(tbl)[i] <- colnames(.)[i]
}
tbl %>% mutate(ID = seq_along(length(nrow(tbl))))
}
HOCRLong <- GlobCal %>% # OPTIC3
mutate(CalData = purrr::map(
CalData,
~ select(.x, !all_of(c("Units","FieldLength","DataType","CalLines","FitType","a0","a1","im","cint")))
)) %>% # Packet metadata
mutate(CalData = purrr::map(
CalData, ~ select(.x, !all_of(c("SampleDelay","DarkSample","DarkAverage","SpecTemp","Frame","Timer","CheckSum")))
)) %>%
select(Instrument, SN, CalData) %>%
filter(str_detect(Instrument, "HSE|HPL"))
HOCRWide <- HOCRLong %>%
mutate(CalData = purrr::map(
CalData,
~ pivot_wider(
.,
names_from = all_of(c("Type", "Wavelength")),
names_sep = "_",
values_from = Channels
))) %>%
mutate(CalData = purrr::map(CalData, ~ select(., where(function(x) all(!is.na(x))))))
ShortNobs <- HOCRWide %>%
mutate(Nobs = purrr::map_dbl(CalData, ~ length(rownames(.))))
ShortNobs <- ShortNobs %>%
filter(Nobs == min(ShortNobs$Nobs)) %>%
unnest(cols = c(CalData))
MinTime <- min(ShortNobs$GPSTime)
#format(MinTime, "%Y-%m-%d %H:%M:%OS3")
MaxTime <- max(ShortNobs$GPSTime)
#format(MaxTime, "%Y-%m-%d %H:%M:%OS3")
TimeSeq <- seq.POSIXt(MinTime, MaxTime, by = min(ShortNobs$IntTime))
#format(TimeSeq, "%Y-%m-%d %H:%M:%OS3")
HOCRWide <- HOCRWide %>%
mutate(CalData = purrr::map(CalData, ~ select(., !IntTime)))
approx_tbl <- function(., TimeSeq) {
tbl <- tibble(DateTime = TimeSeq)
for (i in seq_along(colnames(.))[-1]) {
coord <- approx(x = .[[1]], y = .[[i]], xout = TimeSeq, method = "linear")
tbl <- bind_cols(tbl, x = coord[[2]])
colnames(tbl)[i] <- colnames(.)[i]
}
tbl %>% mutate(ID = seq_along(length(nrow(tbl))))
}
HOCRWide <- HOCRWide %>%
mutate(AproxData = purrr::map(CalData, ~ approx_tbl(., TimeSeq)))
View(HOCRWide)
View(HOCRWide[[4]][[1]])
seq_along(TimeSeq)
HOCRWide <- HOCRWide %>%
mutate(CalData = purrr::map(CalData, ~ select(., !IntTime)))
HOCRLong <- GlobCal %>% # OPTIC3
mutate(CalData = purrr::map(
CalData,
~ select(.x, !all_of(c("Units","FieldLength","DataType","CalLines","FitType","a0","a1","im","cint")))
)) %>% # Packet metadata
mutate(CalData = purrr::map(
CalData, ~ select(.x, !all_of(c("SampleDelay","DarkSample","DarkAverage","SpecTemp","Frame","Timer","CheckSum")))
)) %>%
select(Instrument, SN, CalData) %>%
filter(str_detect(Instrument, "HSE|HPL"))
HOCRLong <- GlobCal %>% # OPTIC3
mutate(CalData = purrr::map(
CalData,
~ select(.x, !all_of(c("Units","FieldLength","DataType","CalLines","FitType","a0","a1","im","cint")))
)) %>% # Packet metadata
mutate(CalData = purrr::map(
CalData, ~ select(.x, !all_of(c("SampleDelay","DarkSample","DarkAverage","SpecTemp","Frame","Timer","CheckSum")))
)) %>%
select(Instrument, SN, CalData) %>%
filter(str_detect(Instrument, "HSE|HPL"))
HOCRWide <- HOCRLong %>%
mutate(CalData = purrr::map(
CalData,
~ pivot_wider(
.,
names_from = all_of(c("Type", "Wavelength")),
names_sep = "_",
values_from = Channels
))) %>%
mutate(CalData = purrr::map(CalData, ~ select(., where(function(x) all(!is.na(x))))))
ShortNobs <- HOCRWide %>%
mutate(Nobs = purrr::map_dbl(CalData, ~ length(rownames(.))))
ShortNobs <- ShortNobs %>%
filter(Nobs == min(ShortNobs$Nobs)) %>%
unnest(cols = c(CalData))
MinTime <- min(ShortNobs$GPSTime)
#format(MinTime, "%Y-%m-%d %H:%M:%OS3")
MaxTime <- max(ShortNobs$GPSTime)
#format(MaxTime, "%Y-%m-%d %H:%M:%OS3")
TimeSeq <- seq.POSIXt(MinTime, MaxTime, by = min(ShortNobs$IntTime))
#format(TimeSeq, "%Y-%m-%d %H:%M:%OS3")
HOCRWide <- HOCRWide %>%
mutate(CalData = purrr::map(CalData, ~ select(., !IntTime)))
approx_tbl <- function(., TimeSeq) {
tbl <- tibble(DateTime = TimeSeq)
for (i in seq_along(colnames(.))[-1]) {
coord <- approx(x = .[[1]], y = .[[i]], xout = TimeSeq, method = "linear")
tbl <- bind_cols(tbl, x = coord[[2]])
colnames(tbl)[i] <- colnames(.)[i]
}
tbl %>% mutate(ID = seq_along(TimeSeq))
}
HOCRWide <- HOCRWide %>%
mutate(AproxData = purrr::map(CalData, ~ approx_tbl(., TimeSeq)))
HOCRLong <- HOCRWide %>%
mutate(AproxData = purrr::map(
AproxData,
~pivot_longer(
.,
cols = matches("[[:alpha:]]{2}_[[:digit:]]{3}(.[[:digit:]]{1,2})?"),
values_to = "Channels",
names_to = c("Wavelength"),
names_prefix = "[[:alpha:]]{2}_",
names_transform = list(Wavelength = as.numeric)
) %>%
group_by(ID)
))
PlyFont <- list(family="Times New Roman", size = 18)
BlackSquare <- list(type = "rect", fillcolor = "transparent",line = list(width = 0.5), xref = "paper", yref = "paper", x0 = 0, x1 = 1, y0 = 0, y1 = 1 )
HOCRdata <- HOCRLong %>% select(Instrument, SN, AproxData)
ply <- HOCRdata %>%
#filter(str_detect(Instrument, "HPL")) %>%
mutate(Plot = purrr::map2(.x = AproxData, .y = SN, ~
plot_ly(.x) %>%
add_lines(x = ~Wavelength, y = ~Channels , name = .y, showlegend = F) %>%
add_annotations(
text = ~.y,
x = 0.5,
y = 1,
yref = "paper",
xref = "paper",
xanchor = "middle",
yanchor = "top",
showarrow = FALSE,
font = list(size = 15)
) %>%
layout(
shapes = BlackSquare,
yaxis = list(rangemode = "nonnegative"
#title = list(text = ~paste0(unique(.x$Type), unique(.x$Units)))
),
xaxis = list(rangemode = "nonnegative")
)
))
Lu <- ply %>%
filter(str_detect(Instrument, "HPL")) %>%
subplot(shareX = T, shareY = T)
Ed <- ply %>%
filter(str_detect(Instrument, "HSE"))
Ed <- Ed$Plot
subplot(Ed[[1]], Lu, nrows = 2, margin = 0.035) %>%
add_annotations(
text = ~TeX("\\text{Wavelength [nm]}"),
x = 0.5,
y = -0.1,
yref = "paper",
xref = "paper",
xanchor = "middle",
yanchor = "bottom",
showarrow = FALSE,
font = list(size = 18)
) %>%
layout(
font = PlyFont,
yaxis = list(title = list(text = TeX("\\text{E}_\\text{d}"))),
yaxis2 = list(title = list(text = TeX("\\text{L}_\\text{u}")))#,
#xaxis3 = list(title = list(text = TeX("\\text{Wavelength}")))
) %>%
config(mathjax = "local", displayModeBar = T)
devtools::load_all(".")
rm(list = c("filter_hocr", "tidy_hocr"))
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
library(sear)
library(dplyr)
library(lubridate)
library(clock)
library(microbenchmark)
library(purrr)
library(plotly)
library(readr)
library(reticulate)
library(stringr)
library(tidyr)
reticulate::source_python(system.file("py","hocr.py", package = "sear", mustWork = T))
# Good data file: DATA_20211111_171729.bin
ConFile <- system.file("extdata", "DATA_20211111_160607.bin", package = "sear", mustWork = T)
# Python function
RawHOCR <- Hocr$from_file(ConFile)
RawHOCR <- RawHOCR$packets
# Filter invalid HOCR packets
# For now the only check is made on instrument name, could be more thorough
ValidInd <- purrr::imap_lgl(RawHOCR, ~ str_detect(as.character(.x$instrument, errors="ignore"), "SAT(HPL|HSE|HED|PLD)"))
if (any(!ValidInd)){
warning(length(which(!ValidInd)), " invalids HOCR packets removed.")
RawHOCR <- RawHOCR[ValidInd]
} else {
RawHOCR <- RawHOCR
}
# end at 49:25
# ymd_hms("2021-11-11 18:49:16"), ymd_hms("2021-11-11 18:50:25")
Station1PaP <- interval(ymd_hms("2021-11-11 01:00:00"), ymd_hms("2021-11-11 23:50:25"))
AplaDate <- "2021-11-11"
pur_clock <- function(RawHOCR, AplaDate){
purrr::map(.x = RawHOCR, ~ clock::date_time_parse(paste0(AplaDate," ",hms::as_hms(.x$gpstime/1000)), zone = "UTC"))
}
TimeIndexHOCR <- pur_clock(RawHOCR, AplaDate)
#test <- unlist(TimeIndexHOCR, recursive = T)
filter_hocr <- function(RawHOCR, TimeIndexHOCR, TimeInt) {
# Ideally the packet DateTime would be construct from the packet only ...
# As I don't know the Date here quick and dirty fix with AplaDate
Ind <- purrr::map_lgl(.x = TimeIndexHOCR, ~ .x %within% TimeInt)
# Search for shutter dark measurment in selected point
#DarkInd <- purrr::map_lgl(.x = RawHOCR[Ind], ~ str_detect(as.character(.x$instrument, error = "ignore"), "HED|PLD"))
RawHOCR[Ind]
}
FiltRawHOCR <- filter_hocr(RawHOCR, TimeIndexHOCR, TimeInt = Station1PaP)
CalFiles <- list.files(system.file("cal", "hocr", package = "sear", mustWork = T), full.names = T)
read_cal <- function(CalFiles){
# CalFiles is a list of calibration files
# Fit type specific coefficients
# OPTIC3 fit type: a0, a1, im, cint
# THERM1 fit type: m0 m1 m2 m3 Tr
# POLYU fit type: a0 a1
# Create one tidy data frame per fit type
CalFile <- read_lines(CalFiles, skip_empty_rows = T)
CalFile <- CalFile[!str_detect(CalFile, "#")]
# Cal file have tow types of delimiter ... space for definition line and tab for calibration coefficient
# Working code over there !
CalFile <- str_replace_all(CalFile, "\\t", " ")
# Get index of definition file
indi <- purrr::imap_dbl(CalFile, ~  ifelse(str_detect(.x, "1 (OPTIC3|THERM1|POLYU)"), .y, NA))
# Calibration data is on the next line
CalData <- CalFile[indi+1]
# Put definition and calibration on the same line
CalFile <- tibble(Def = CalFile, Cal = CalData)
# Dirty Stuff to remove calibration lines: offset index by one to match calibration lines and logically remove them
CalFile <- CalFile %>% filter(is.na(!append(indi[-length(indi)], NA, 0)))
CalFile <- CalFile %>%
separate(
col = Def,
into = c("Type", "ID", "Units", "FieldLength", "DataType", "CalLines", "FitType"),
sep = " ",
remove = T,
convert = T
)
CalID <- CalFile %>%
filter(Type %in% c("INSTRUMENT", "SN")) %>%
select(Type, ID) %>%
pivot_wider(
names_from = Type,
values_from = ID) %>%
rename(Instrument = INSTRUMENT)
OPTIC3 <- CalFile %>%
filter(Type == "ES" | Type == "LU") %>%
separate(
col = Cal,
into = c("a0", "a1","im","cint"),
sep = " ",
remove = T,
convert = T
) %>%
bind_cols(CalID) %>%
rename(Wavelength = "ID") %>%
mutate(Wavelength = as.numeric(Wavelength))
THERM1 <- CalFile %>%
filter(FitType == "THERM1") %>%
separate(
col = Cal,
into = c("m0", "m1","m2","m3","Tr"),
sep = " ",
remove = T,
convert = T
) %>%
bind_cols(CalID)
# POLYU span from a0 to an, should write code to take that into account
# Sep in cal file appear to be two spaces ... cloud manage all those with "[[:blank:]]"
POLYU <- CalFile %>%
filter(FitType == "POLYU") %>%
separate(
col = Cal,
into = c("a0", "a1"),
sep = "[[:blank:]]{2}",
remove = T,
convert = T
) %>%
bind_cols(CalID)
#tibble(FitType = c("OPTIC3","THERM1","POLYU"), CalData = list(OPTIC3 = OPTIC3, THERM1 = THERM1, POLYU = POLYU))
return(list(OPTIC3 = OPTIC3, THERM1 = THERM1, POLYU = POLYU))
}
# test <- test %>%
# 	mutate(
# 		FitType = case_when(
# 			str_detect(text, "POLYU") ~ "POLYU"
# 	))
CalList <- map(CalFiles, read_cal)
FlatCal <- unlist(CalList, recursive = F)
OPTIC3 <- bind_rows(FlatCal[names(FlatCal) == "OPTIC3"])
THERM1 <- bind_rows(FlatCal[names(FlatCal) == "THERM1"])
POLYU <- bind_rows(FlatCal[names(FlatCal) == "POLYU"])
tidy_hocr <- function(Packets){
tibble::tibble(
# Applanix time added by the DataLogger in millisecond
# Unkown Date format in the binary file, so take the one in the txt file
GPSTime = as.POSIXct(paste0(AplaDate, hms::as_hms(Packets$gpstime/1000)), format = "%Y-%m-%d %H:%M:%OS", tz = "UTC"),
# HOCR Packets
# Fix missing byte bug by ignoring decoding error
Instrument = as.character(Packets$instrument, errors="ignore"),
SN = as.character(Packets$sn, errors="ignore"),
IntTime = Packets$inttime,
SampleDelay = Packets$sampledelay,
DarkSample = Packets$darksample,
DarkAverage = Packets$darkaverage,
SpecTemp = as.character(Packets$spectemp, errors="ignore"),
Frame = Packets$frame,
Timer = as.character(Packets$timer, errors="ignore"),
CheckSum = Packets$checksum,
Channels = Packets$channel
)
}
RawData <- map_df(FiltRawHOCR, tidy_hocr)
devtools::load_all(".")
RawData <- map_df(FiltRawHOCR, tidy_hocr)
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
HOCRLong
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::build_readme()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='mabit-raphael', token='E9280F2D89D865047F2D5092AB577579', secret='v2JcmsZSWLG5ZQdzkzTSKHWNkslxaflZuLTo7lje')
rsconnect::deployApp()
rsconnect::accounts
rsconnect::accounts()
rsconnect::deployApp(account = "mabit-raphael")
devtools::build_readme()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
install.packages("golem")
install.packages("golem")
devtools::load_all(".")
sear_view()
golem::add_module( name = "example" )
golem::add_module( name = "example" )
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
golem::add_module(name = "HOCR")
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
sear_view
devtools::load_all(".")
sear_view
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
devtools::load_all(".")
sear_view()
golem::create_golem("sear")
setwd("~/R")
golem::create_golem("sear")
install.packages("learnr")
