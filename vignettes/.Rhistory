input$`plotly_relayout-map`
input$`plotly_afterplot-map`
input$`.clientValue-default-plotlyCrosstalkOpts`
input$`plotly_brushing-map`
input$DataTable_cells_selected
input$`plotly_afterplot-map`
Map
input$`plotly_relayout-map`
shiny::runApp('R')
runApp('R')
View(p)
runApp('R')
runApp('R')
runApp('R')
shiny::runApp()
runApp()
selected()
selected()$ID
runApp()
runApp()
runApp()
runApp()
shiny::runApp('R')
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
input$DataLogger$datapath
input$DataLogger
DataFile <- input$DataLogger
shiny::runApp('R')
input$DataLogger$datapath
str_detect(input$DataLogger$datapath, ".txt")
input$DataLogger$datapath[str_detect(input$DataLogger$datapath, ".txt")]
input$DataLogger %>% filter(str_detect(datapa))
input$DataLogger %>% filter(str_detect(datapath, ".txt"))
input$DataLogger %>% filter(str_detect(datapath, ".txt"))$datapath
runApp('R')
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
DataFiles$txt
runApp()
usethis::use_devtools()
install.packages("usethis")
usethis::use_devtools()
usethis::edit_r_profile()
setwd("~/R")
setwd("~/R/sear")
create_tidy_package(.)
usethis::create_tidy_package()
usethis::create_tidy_package(getwd())
usethis::create_tidy_package(getwd())
#library(sear)
## basic example code
use_gpl_license(version = 3, include_future = TRUE)
usethis::use_gpl_license(version = 3, include_future = TRUE)
shiny::runApp('R')
devtools::load_all()
runApp()
runApp()
shiny::runApp()
devtools::load_all("~/R/sear")
runApp()
shiny::runApp()
devtools::load_all("~/R/sear")
runApp()
DataFiles()
DataFiles()$txt
read_log(DataFiles$txt)
shiny::runApp()
devtools::load_all()
devtools::load_all()
install_kaitaistruct()
runApp()
reticulate::source_python("../py/hocr.py")
runApp()
runApp()
runApp()
devtools::load_all("~/R/sear")
runApp()
devtools::load_all("~/R/sear")
View(r)
hocr.Hocr.from_file
Hocr()
Hocr.from_file()
devtools::load_all("~/R/sear")
devtools::load_all("~/R/sear")
source("~/R/sear/R/zzz.R", echo=TRUE)
source("~/R/sear/R/zzz.R", echo=TRUE)
devtools::load_all("~/R/sear")
source("~/R/sear/R/zzz.R", echo=TRUE)
source("~/R/sear/R/zzz.R", echo=TRUE)
devtools::load_all("~/R/sear")
devtools::load_all("~/R/sear")
Hocr()
Hocr$from_file()
devtools::load_all("~/R/sear")
runApp()
BinFile
runApp()
runApp()
runApp()
runApp()
BinFile
RawFeed = Hocr$from_file(BinFile)
RawFeed
RawFeed <- Hocr$from_file(BinFile)
read_lines(BinFile, n_max = 10)
Hocr$from_file(BinFile)
Hocr$from_file("/home/raphael/R/convertr/inst/dev/data/L1/SeaDoo/2021/11-November/11/DATA_20211111_171729.bin")
devtools::load_all("~/R/sear")
runApp()
BinFile
Hocr$from_file(BinFile)
ConFile <- "/home/raphael/R/convertr/inst/dev/data/L1/SeaDoo/2021/11-November/11/DATA_20211111_161338.bin"
Hocr$from_file("/home/raphael/R/convertr/inst/dev/data/L1/SeaDoo/2021/11-November/11/DATA_20211111_161338.bin")
test <- Hocr$from_file("/home/raphael/R/convertr/inst/dev/data/L1/SeaDoo/2021/11-November/11/DATA_20211111_161338.bin")
View(test)
Hocr$from_file(BinFile)
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
library(Rcpp)
usethis::use_rcpp()
devtools::load_all(".")
library(sear)
hocr
devtools::document()
devtools::document()
#include "kaitaistream.h"
devtools::document()
use_namespace(roxygen = TRUE)
usethis::use_namespace(roxygen = TRUE)
library(sear)
library(sear)
runApp('R')
devtools::document()
devtools::document()
usethis::use_namespace()
devtools::document()
devtools::document()
Rcpp::compileAttributes()
devtools::document()
library(sear)
sear:::sear_view()
Hocr$from_file
hocr_t
Rcpp::compileAttributes()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
hocr_t
Rcpp::compileAttributes()
Rcpp::compileAttributes()
usethis::use_namespace()
usethis::create_package()
usethis::create_package(".")
usethis::create_tidy_package()
usethis::create_tidy_package(".")
here::dr_here()
usethis::create_tidy_package(".")
use_gpl3_license()
usethis::use_gpl3_license()
library(usethis)
use_git()
library(sear)
file.path(libname, pkgname)
file.path(libname, pkgname, "py", "hocr.py")
library(sear)
sear:::sear_view()
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(DT)
library(stringr)
library(lubridate)
library(leaflet)
library(leafgl)
library(crosstalk)
library(plotly)
library(purrr)
library(leafem)
#library(mapview)
library(leaflet.extras)
library(htmltools)
library(leafpop)
library(readr)
library(forcats)
sear:::sear_view()
n
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(DT)
library(stringr)
library(lubridate)
library(leaflet)
library(leafgl)
library(crosstalk)
library(plotly)
library(purrr)
library(leafem)
#library(mapview)
library(leaflet.extras)
library(htmltools)
library(leafpop)
library(readr)
library(forcats)
sear:::sear_view()
shiny::runApp('R')
devtools::document()
devtools::document()
devtools::document()
library(sear)
sear_view()
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(DT)
library(stringr)
library(lubridate)
library(leaflet)
library(leafgl)
library(crosstalk)
library(plotly)
library(purrr)
library(leafem)
#library(mapview)
library(leaflet.extras)
library(htmltools)
library(leafpop)
library(readr)
library(forcats)
library(sear)
sear_view()
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(DT)
library(stringr)
library(lubridate)
library(leaflet)
library(leafgl)
library(crosstalk)
library(plotly)
library(purrr)
library(leafem)
#library(mapview)
library(leaflet.extras)
library(htmltools)
library(leafpop)
library(readr)
library(forcats)
sear_view()
library(sear)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(DT)
library(stringr)
library(lubridate)
library(leaflet)
library(leafgl)
library(crosstalk)
library(plotly)
library(purrr)
library(leafem)
#library(mapview)
library(leaflet.extras)
library(htmltools)
library(leafpop)
library(readr)
library(forcats)
sear_view()
library(sear)
library(shiny)
library(shinydashboard)
library(dplyr)
library(tidyr)
library(DT)
library(stringr)
library(lubridate)
library(leaflet)
library(leafgl)
library(crosstalk)
library(plotly)
library(purrr)
library(leafem)
#library(mapview)
library(leaflet.extras)
library(htmltools)
library(leafpop)
library(readr)
library(forcats)
sear_view
sear_view()
Hocr$from_file(BinFile)
BinFile
Hocr$from_file
library(sear)
sear_view()
Hocr$from_file(BinFile)
library(sear)
sear_view()
RawFeed = Hocr$from_file(BinFile)
library(sear)
sear_view()
sear_view()
options(shiny.maxRequestSize = 10000*1024^2)
library(sear)
sear_view()
test <- RawHOCR()
RawHOCR
RawHOCR()
test<- RawHOCR
library(sear)
sear_view()
RawHOCR
RawHOCR()
library(sear)
library(sear)
sear_view()
RawHOCR()
test <- RawHOCR()
View(test)
RawHOCR()
input$DataLogger$datapath
sear_view()
test <- RawHOCR()
test$hocr_packet
View(test)
test$hocr_packet$gpstime
test$hocr_packet$HocrPacket$gpstime
test$hocr_packet$HocrPacket
test$hocr_packet[[1]]
test$hocr_packet[[1]]$gpstime
untest <- unlist(test$hocr_packet)
View(untest)
untest$gpstime
untest[[1]]$gpstime
library(sear)
sear_view()
test <- RawHOCR()
View(test)
library(sear)
sear_view()
test <- RawHOCR()
untest <- unlist(test)
untest <- unlist(test$HocrPacket)
untest <- unlist(test$packets)
sear_view()
test <- RawHOCR()
untest <- unlist(test$packets)
purrr::map(untest, .x$gpstime)
purrr::map(untest = .x, .x$gpstime)
purrr::map(untest = .x, ~ .x$gpstime)
purrr::map(.x = untest, ~ .x$gpstime)
purrr::map(.x = untest, ~ hms::as_hms(.x$gpstime/1000))
selected()$customdata
UpApla$DateTime[UpApla$ID %in% selected()$customdata]
UpApla()$DateTime[UpApla()$ID %in% selected()$customdata]
SelDateTime <- UpApla()$DateTime[UpApla()$ID %in% selected()$customdata]
TimeInt =TimeInterval(min(SelDateTime, na.rm = T), max(SelDateTime, na.rm = T))
TimeInt = interval(min(SelDateTime, na.rm = T), max(SelDateTime, na.rm = T))
ind <- purrr::imap(.x = Packets, ~ hms::as_hms(.x$gpstime/1000) %within% TimeInt)
Packets <- unlist(RawHOCR$packets)
Packets <- unlist(RawHOCR()$packets)
filter_hocr <- function(RawHOCR, TimeInt) {
Packets <- unlist(RawHOCR$packets)
ind <- purrr::imap(.x = Packets, ~ hms::as_hms(.x$gpstime/1000) %within% TimeInt)
}
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeInt)
ind <- purrr::imap(.x = Packets, ~ ymd_hms(hms::as_hms(.x$gpstime/1000)) %within% TimeInt)
ymd_hms(paste0("2021-11-11",T,hms::as_hms(Packets$gpstime/1000)))
ymd_hms(paste0("2021-11-11","T" ,hms::as_hms(Packets$gpstime/1000)))
hms::as_hms(Packets$gpstime/1000)
Packets$gpstime/1000
Packets$gpstime
View(Packets)
ind <- purrr::imap(.x = Packets, ~ ymd_hms(paste0("2021-11-11","T" ,hms::as_hms(Packets$gpstime/1000))) %within% TimeInt)
ind <- purrr::imap(.x = Packets, ~ ymd_hms(paste0("2021-11-11","T" ,hms::as_hms(.x$gpstime/1000))) %within% TimeInt)
View(ind)
Packets[ind]
ind
ind[[]]
ind <- purrr::imap_lgl(.x = Packets, ~ ymd_hms(paste0("2021-11-11","T" ,hms::as_hms(.x$gpstime/1000))) %within% TimeInt)
ind
Packets[ind]
test <- Packets[ind]
TimeInt
date(tmp$DateTime)
unique(date(tmp$DateTime))
Packets[ind]
Packets[[ind]]
Packets[[ind]]
Packets[ind]
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeInt, AplaDate = unique(date(tmp$DateTime)))
filter_hocr <- function(RawHOCR, TimeInt, AplaDate) {
Packets <- unlist(RawHOCR$packets)
# Ideally the packet DateTime would be construct from the packet only ...
# As I don't know the Date here quick and dirty fix with AplaDate
ind <- purrr::imap_lgl(.x = Packets, ~ ymd_hms(paste0("2021-11-11","T" ,hms::as_hms(.x$gpstime/1000))) %within% TimeInt)
Packets[ind]
}
SelDateTime <- UpApla()$DateTime[UpApla()$ID %in% selected()$customdata]
TimeInt <- interval(min(SelDateTime, na.rm = T), max(SelDateTime, na.rm = T))
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeInt, AplaDate = unique(date(tmp$DateTime)))
library(sear)
sear_view()
devtools::load_all(".")
sear_view()
input$ObsTye %in% c("Unkown","Transit")
input$ObsTye
input$ObsType
library(sear)
sear_view()
library(sear)
sear_view()
library(sear)
library(sear)
sear_view()
library(sear)
sear_view()
library(sear)
sear_view()
Packets <- unlist(RawHOCR()$packets)
Packets <- unlist(RawHOCR()$packets)
Packets <- unlist(RawHOCR()$packets)
AplaDate <- unique(date(UpApla()$DateTime))
TimeIndexHOCR()
Packets <- unlist(RawHOCR()$packets)
library(sear)
library(sear)
sear_view()
Packets <- unlist(RawHOCR()$packets)
AplaDate <- unique(date(UpApla()$DateTime))
UpApla()$DateTime
UpApla()
Apla()
Apla()
AplaDate = "2021-11-11"
test <- purrr::map(.x = Packets, ~ ymd_hms(paste0(AplaDate,"T" ,hms::as_hms(.x$gpstime/1000))))
View(test)
View(Packets)
# Posixct object appear to be heavy, same length list of DateTime is heavier (25.8 MB) than the list of HOCR packets (22.2)
# Computation time arround 2/3 minutes
purrr::map_chr(.x = Packets, ~ ymd_hms(paste0(AplaDate,"T" ,hms::as_hms(.x$gpstime/1000))))
filter_hocr <- function(TimeIndexHOCR, TimeInt) {
# Ideally the packet DateTime would be construct from the packet only ...
# As I don't know the Date here quick and dirty fix with AplaDate
ind <- purrr::map_lgl(.x = TimeIndexHOCR, ~ .x %within% TimeInt)
Packets[ind]
}
library(sear)
sear_view()
library(sear)
library(sear)
sear_view()
TimeIndexHOCR()
TimeIndexHOCR()
FiltRawHOCR <- filter_hocr(TimeIndexHOCR(), TimeInt)
filter_hocr <- function(RawHOCR, TimeIndexHOCR, TimeInt) {
# Ideally the packet DateTime would be construct from the packet only ...
# As I don't know the Date here quick and dirty fix with AplaDate
ind <- purrr::map_lgl(.x = TimeIndexHOCR, ~ .x %within% TimeInt)
RawHOCR[ind]
}
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeIndexHOCR(), TimeInt)
RawHOCR()
library(sear)
sear_view()
FiltRawHOCR <- filter_hocr(RawHOCR(), TimeIndexHOCR(), TimeInt)
View(FiltRawHOCR)
RawData <- purrr::map_df(FiltRawHOCR, tidy_hocr)
View(RawData)
Q
library(sear)
sear_view()
View(GlobRaw)
View(GlobRaw[[3]][[1]])
CalTimeData <- left_join(RawData, POLYU %>% filter(Type == "INTTIME"), by = c("Instrument", "SN"))
View(POLYU)
View(POLYU[[3]][[1]])
View(POLYU)
View(POLYU[[3]][[1]])
View(GlobRaw)
View(GlobRaw[[3]][[1]])
View(THERM1)
View(THERM1[[3]][[1]])
View(GlobRaw[[6]][[1]])
RawData <- left_join(RawData, POLYU %>% filter(Type == "INTTIME"), by = c("Instrument", "SN"))
THERM1 <- bind_rows(FlatCal[names(FlatCal) == "THERM1"])
POLYU <- bind_rows(FlatCal[names(FlatCal) == "POLYU"])
RawData <- left_join(RawData, POLYU %>% filter(Type == "INTTIME"), by = c("Instrument", "SN"))
View(RawData)
View(GlobRaw[[3]][[1]])
library(sear)
library(dplyr)
library(lubridate)
library(purrr)
library(readr)
library(reticulate)
library(stringr)
library(tidyr)
reticulate::repl_python()
